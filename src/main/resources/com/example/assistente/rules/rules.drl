package com.example.assistente.rules
dialect "mvel"

import java.time.LocalDate
import java.time.Period

import com.example.assistente.model.dto.ExamePacienteDTO
import com.example.assistente.model.dto.PacienteDTO
import com.example.assistente.model.dto.ResultadoDTO
import com.example.assistente.drools.model.ExamesDTO
import com.example.assistente.drools.Indexadores
import com.example.assistente.drools.model.ResultadosDTO
import com.example.assistente.model.type.TiposExames
import com.example.assistente.model.type.Status
import com.example.assistente.model.type.SexoPaciente
import java.util.Arrays

//plaquetas
rule "plaquetas"
salience 3
	when
	    ResultadosDTO($resultados: resultados)
	    ExamesDTO($exames: exames)
		$exame: ExamePacienteDTO(tipoExame == TiposExames.plaquetas) from $exames
	then
		System.out.println("plaquetas");
        $resultados.add(ResultadoDTO.builder()
            .value($exame.value)
            .values(Indexadores.plaquetas)
            .tipoExame($exame.tipoExame)
            .build());
	end	


// tpg tgo
rule "tgp"
salience 3
	when
	    ResultadosDTO($resultados: resultados)
	    ExamesDTO($exames: exames)
		$exame: ExamePacienteDTO(tipoExame == TiposExames.tgp) from $exames
	then
		System.out.println("tgp");
        $resultados.add(ResultadoDTO.builder()
            .value($exame.value)
            .values(Indexadores.tgp)
            .tipoExame($exame.tipoExame)
            .build());
	end
	
rule "tgo"
salience 3
	when
	    ResultadosDTO($resultados: resultados)
	    ExamesDTO($exames: exames)
		$exame: ExamePacienteDTO(tipoExame == TiposExames.tgo) from $exames
	then
		System.out.println("tgo");
        $resultados.add(ResultadoDTO.builder()
            .value($exame.value)
            .values(Indexadores.tgo)
            .tipoExame($exame.tipoExame)
            .build());
	end
	
	
//tsh e t4 livre
rule "tsh"
salience 3
	when
	    ResultadosDTO($resultados: resultados)
	    ExamesDTO($exames: exames)
		$exame: ExamePacienteDTO(tipoExame == TiposExames.tsh) from $exames
	then
		System.out.println("tsh");
        $resultados.add(ResultadoDTO.builder()
            .value($exame.value)
            .values(Indexadores.tsh)
            .tipoExame($exame.tipoExame)
            .build());
	end
	
rule "t4 livre"
salience 3
	when
	    ResultadosDTO($resultados: resultados)
	    ExamesDTO($exames: exames)
		$exame: ExamePacienteDTO(tipoExame == TiposExames.t4_livre) from $exames
	then
		System.out.println("t4 livre");
        $resultados.add(ResultadoDTO.builder()
            .value($exame.value)
            .values(Indexadores.t4Livre)
            .tipoExame($exame.tipoExame)
            .build());
	end
	
//pcr
rule "pcr"
salience 3
	when
	    ResultadosDTO($resultados: resultados)
	    ExamesDTO($exames: exames)
		$exame: ExamePacienteDTO(tipoExame == TiposExames.pcr) from $exames
	then
		System.out.println("pcr");
        $resultados.add(ResultadoDTO.builder()
            .value($exame.value)
            .values(Indexadores.pcr)
            .tipoExame($exame.tipoExame)
            .build());
	end
	
//glicose
rule "glicose"
salience 3
	when
	    ResultadosDTO($resultados: resultados)
	    ExamesDTO($exames: exames)
		$exame: ExamePacienteDTO(tipoExame == TiposExames.glicose) from $exames
	then
		System.out.println("glicose");
        $resultados.add(ResultadoDTO.builder()
            .value($exame.value)
            .values(Indexadores.glicose)
            .tipoExame($exame.tipoExame)
            .build());
	end
	
//HDL
rule "HDL"
salience 3
	when
	    ResultadosDTO($resultados: resultados)
	    ExamesDTO($exames: exames)
		$exame: ExamePacienteDTO(tipoExame == TiposExames.hdl) from $exames
	then
		System.out.println("HDL");
        $resultados.add(ResultadoDTO.builder()
            .value($exame.value)
            .values(Indexadores.hdl)
            .tipoExame($exame.tipoExame)
            .build());
	end
	
//LDL
rule "LDL"
salience 3
	when
	    ResultadosDTO($resultados: resultados)
	    ExamesDTO($exames: exames)
		$exame: ExamePacienteDTO(tipoExame == TiposExames.hdl) from $exames
	then
		System.out.println("HDL");
        $resultados.add(ResultadoDTO.builder()
            .value($exame.value)
            .values(Indexadores.hdl)
            .tipoExame($exame.tipoExame)
            .build());
	end
